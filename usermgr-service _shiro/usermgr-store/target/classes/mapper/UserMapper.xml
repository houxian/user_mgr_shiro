<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qiku.usermgr.store.dao.UserMapper">
  <resultMap id="BaseResultMap" type="com.qiku.usermgr.store.model.User">
    <id column="id" jdbcType="BIGINT" property="id" />
    <id column="u_id" jdbcType="BIGINT" property="uId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="sex" jdbcType="INTEGER" property="sex" />
    <result column="employee_id" jdbcType="VARCHAR" property="employeeId" />
    <result column="birthday" jdbcType="VARCHAR" property="birthday" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="position_id" jdbcType="BIGINT" property="positionId" />
    <result column="leader_id" jdbcType="BIGINT" property="leaderId" />
    <result column="department_id" jdbcType="BIGINT" property="departmentId" />
    <result column="pwd" jdbcType="VARCHAR" property="pwd" />
    <result column="salt" jdbcType="VARCHAR" property="salt" />
    <result column="role_id" jdbcType="BIGINT" property="roleId" />
    <result column="create_date" jdbcType="BIGINT" property="createDate" />
    <result column="update_date" jdbcType="BIGINT" property="updateDate" />
    <result column="status" jdbcType="CHAR" property="status" />
  </resultMap>
  <sql id="Base_Column_List">
    id, u_id, `name`, sex, employee_id, birthday, email, phone, position_id, leader_id, 
    department_id, pwd, salt, role_id, create_date, update_date, `status`
  </sql>
  <select id="selectByPrimaryKey" parameterType="com.qiku.usermgr.store.model.User" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from u_user
    where u_id = #{uId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.qiku.usermgr.store.model.User">
    delete from u_user
    where u_id = #{uId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.qiku.usermgr.store.model.User" useGeneratedKeys="true">
    insert into u_user (u_id, `name`, sex, 
      employee_id, birthday, email, 
      phone, position_id, leader_id, 
      department_id, pwd, salt, 
      role_id, create_date, update_date, 
      `status`)
    values (#{uId,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, #{sex,jdbcType=INTEGER}, 
      #{employeeId,jdbcType=VARCHAR}, #{birthday,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{phone,jdbcType=VARCHAR}, #{positionId,jdbcType=BIGINT}, #{leaderId,jdbcType=BIGINT}, 
      #{departmentId,jdbcType=BIGINT}, #{pwd,jdbcType=VARCHAR}, #{salt,jdbcType=VARCHAR}, 
      #{roleId,jdbcType=BIGINT}, #{createDate,jdbcType=BIGINT}, #{updateDate,jdbcType=BIGINT}, 
      #{status,jdbcType=CHAR})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.qiku.usermgr.store.model.User" useGeneratedKeys="true">
    insert into u_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="uId != null">
        u_id,
      </if>
      <if test="name != null">
        `name`,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="employeeId != null">
        employee_id,
      </if>
      <if test="birthday != null">
        birthday,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="positionId != null">
        position_id,
      </if>
      <if test="leaderId != null">
        leader_id,
      </if>
      <if test="departmentId != null">
        department_id,
      </if>
      <if test="pwd != null">
        pwd,
      </if>
      <if test="salt != null">
        salt,
      </if>
      <if test="roleId != null">
        role_id,
      </if>
      <if test="createDate != null">
        create_date,
      </if>
      <if test="updateDate != null">
        update_date,
      </if>
      <if test="status != null">
        `status`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="uId != null">
        #{uId,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=INTEGER},
      </if>
      <if test="employeeId != null">
        #{employeeId,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null">
        #{birthday,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="positionId != null">
        #{positionId,jdbcType=BIGINT},
      </if>
      <if test="leaderId != null">
        #{leaderId,jdbcType=BIGINT},
      </if>
      <if test="departmentId != null">
        #{departmentId,jdbcType=BIGINT},
      </if>
      <if test="pwd != null">
        #{pwd,jdbcType=VARCHAR},
      </if>
      <if test="salt != null">
        #{salt,jdbcType=VARCHAR},
      </if>
      <if test="roleId != null">
        #{roleId,jdbcType=BIGINT},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=BIGINT},
      </if>
      <if test="updateDate != null">
        #{updateDate,jdbcType=BIGINT},
      </if>
      <if test="status != null">
        #{status,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.qiku.usermgr.store.model.User">
    update u_user
    <set>
      <if test="name != null">
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=INTEGER},
      </if>
      <if test="employeeId != null">
        employee_id = #{employeeId,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null">
        birthday = #{birthday,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="positionId != null">
        position_id = #{positionId,jdbcType=BIGINT},
      </if>
      <if test="leaderId != null">
        leader_id = #{leaderId,jdbcType=BIGINT},
      </if>
      <if test="departmentId != null">
        department_id = #{departmentId,jdbcType=BIGINT},
      </if>
      <if test="pwd != null">
        pwd = #{pwd,jdbcType=VARCHAR},
      </if>
      <if test="salt != null">
        salt = #{salt,jdbcType=VARCHAR},
      </if>
      <if test="roleId != null">
        role_id = #{roleId,jdbcType=BIGINT},
      </if>
      <if test="createDate != null">
        create_date = #{createDate,jdbcType=BIGINT},
      </if>
      <if test="updateDate != null">
        update_date = #{updateDate,jdbcType=BIGINT},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=CHAR},
      </if>
    </set>
    where u_id = #{uId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qiku.usermgr.store.model.User">
    update u_user
    set `name` = #{name,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=INTEGER},
      employee_id = #{employeeId,jdbcType=VARCHAR},
      birthday = #{birthday,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      position_id = #{positionId,jdbcType=BIGINT},
      leader_id = #{leaderId,jdbcType=BIGINT},
      department_id = #{departmentId,jdbcType=BIGINT},
      pwd = #{pwd,jdbcType=VARCHAR},
      salt = #{salt,jdbcType=VARCHAR},
      role_id = #{roleId,jdbcType=BIGINT},
      create_date = #{createDate,jdbcType=BIGINT},
      update_date = #{updateDate,jdbcType=BIGINT},
      `status` = #{status,jdbcType=CHAR}
    where id = #{id,jdbcType=BIGINT}
      and u_id = #{uId,jdbcType=BIGINT}
  </update>
  <select id="findByName" parameterType="java.lang.String" resultMap="BaseResultMap">
    select u.*, (select d.department_name from u_department d where d.department_id = u.department_id) deptName from u_user u
    where u.name = #{name,jdbcType=VARCHAR}
  </select>
  <select id="findPage" resultMap="BaseResultMap">
    select u.*, (select d.department_name from u_department d where d.department_id = u.department_id) deptName from u_user u
  </select>
</mapper>